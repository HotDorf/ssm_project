<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">
	<!-- 配置不拦截的资源 -->
	<security:http pattern="/login.jsp" security="none"/>
	<security:http pattern="/failer.jsp" security="none"/>
	<security:http pattern="/css/**" security="none"/>
	<security:http pattern="/img/**" security="none"/>
	<security:http pattern="/plugins/**" security="none"/>

	<!--
       配置具体的规则
       auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
       use-expressions="false"	是否使用SPEL表达式（没学习过）
   -->
	<security:http auto-config="true" use-expressions="false">
		<!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
		<security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>
		<!-- 定义跳转的具体的页面 -->
		<security:form-login
				login-page="/login.jsp"
				login-processing-url="/login.do"
				default-target-url="/index.jsp"
				authentication-failure-url="/failer.jsp"
				authentication-success-forward-url="/pages/main.jsp"
		/>
		<!-- 关闭跨域请求 -->
		<security:csrf disabled="true"/>
		<!-- 退出
		invalidate-session="true"表示默认退出之后干掉session
		logout-url="/logout.do，退出时的地址
		logout-success-url="/login.jsp"，退出成功后的地址
		-->
		<security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp"/>
	</security:http>
	<!-- 切换成数据库中的用户名和密码
		authentication-provider翻译是证明提供者。
		登陆时会遇到拦截器，背后的Spring-security框架中的Filter会由此获取用户名密码来进行认证操作。
		Spring-security主要做两件事：
			认证：建立一个所声明的主体（用户），在系统中执行动作的其它系统。简单地说就是判断密码是否正确的过程
			授权：用户的权限已经在数据库说明了，在实际中用户访问资源之前给用户分配权限的过程。		-->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="userService">
			<!--加密解码-->
			<!--提交表单的明文要加密之后和new User(username, password)比较-->
			<security:password-encoder ref="passwordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

	<!--导入加密编码对象-->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>